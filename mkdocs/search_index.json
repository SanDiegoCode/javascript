{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Javascript\n\n\nHere you will learn the basics of javascript.\n\n\nFAQs\n\n\n\n\nWhere do I run the code?\n\n\nGo to \ncodepen\n\n\nWe suggest creating an account to save your progress \n\n\n\n\n\n\n\n\n\n\nWhat if I need help?\n\n\nWe're only an \nemail away\n\n\n\n\n\n\nWhat if I'm not a part of SD Code?\n\n\nDon't worry about it! This resource is free to use by anyone!\n\n\n\n\n\n\nCan I host this on my website?\n\n\nSure, as long as you give credit and link it to our website\n\n\n\n\n\n\nHow can I contribute?\n\n\nSubmit a pull request to the repository on \nGithub\n\n\n\n\n\n\n\n\nCreators\n\n\n\n\nRonak Shah\n\n\nNicholas Spencer", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-javascript", 
            "text": "Here you will learn the basics of javascript.", 
            "title": "Welcome to Javascript"
        }, 
        {
            "location": "/#faqs", 
            "text": "Where do I run the code?  Go to  codepen  We suggest creating an account to save your progress       What if I need help?  We're only an  email away    What if I'm not a part of SD Code?  Don't worry about it! This resource is free to use by anyone!    Can I host this on my website?  Sure, as long as you give credit and link it to our website    How can I contribute?  Submit a pull request to the repository on  Github", 
            "title": "FAQs"
        }, 
        {
            "location": "/#creators", 
            "text": "Ronak Shah  Nicholas Spencer", 
            "title": "Creators"
        }, 
        {
            "location": "/HTML5DrawingApp/", 
            "text": "Drawing App with HTML5 Canvas and Javascript\n\n\nPrerequisites: a brain and some basic knowledge of HTML and Javascript.\n\n\nEnd Product\n: a semi-functional, semi-user-friendly, super-cool web app that allows you to draw with your mouse and change the color/size/type of drawing tool.\n\n\nProject Setup\n\n\nYou will need a text editor (I recommend \nAtom.io\n or \nTextwrangler\n), but even Notepad will do. Setup a folder that will contain all of the files for this project, and name it something like \nJavascriptDrawingApp\n (or don't, name it dankmemes if you want). And thats it! Open up your text editor and if you are using a more advanced text editor you can open up the path for your project foldner and advance to the next step (don't worry if you can't, you will probably just need to leave the folder open in your system's file tree, i.e. Finder for Mac, so you can quickly access files inside of it.)\n\n\nIf you're on the web, you can use \nCodepen Projects\n\n\nStep 1\n\n\nCreate your \nindex.html\n file and add the following: \n\n\n!DOCTYPE html\n \n\nhtml\n\n    \nhead\n\n        \ntitle\n My cool drawing app \n/title\n\n        \nstyle\n\n            html, body {\n                margin: 0px;\n                padding: 0px;\n                overflow-x: hidden;\n            }\n        \n/style\n\n    \n/head\n\n    \nbody\n\n        \ncanvas id=\"paper\"\n/canvas\n\n        \nscript src=\"main.js\"\n/script\n\n    \n/body\n\n\n/html\n\n\n\n\nThis is just setting up a basic HTML file that has the small amount of CSS we need in a \nstyle\n tag. All the CSS is doing is making sure that our canvas will be able to take up the entire browser screen by eliminating any extra space. Then in our \nbody\n we have our \ncanvas id=\"paper\"\n/canvas\n that we will use in our Javascript to draw to, and then our \nscript\n tag requesting the Javascript resource, \nmain.js\n that we will create next.\n\n\nStep 2\n\n\nIn the same folder as your \nindex.html\n file, create a \nmain.js\n file and enter the following:\n\n\nvar canvas = document.getElementById(\"paper\"),\n    ctx = canvas.getContext(\"2d\"),\n    width = canvas.width = window.innerWidth,\n    height = canvas.height = window.innerHeight;\n\n\n\nThis Javascript code is initializing a couple of variables, the first being \ncanvas\n, which is initialized to a DOM (Document Object Model) function \ndocument.getElementById(id)\n that returns the HTML element with the corresponding id in our index.html file (in this case, our \ncanvas id=\"paper\"\n/canvas\n element. After this assignment we move onto our context variable, \nctx\n, which calls the function \ngetContext(\"2d\")\n on our recently created \ncanvas\n variable in order to return an object that we can use to draw onto our \ncanvas\n with. Finally, the variables \nwidth\n and \nheight\n are initiated and in a chain of assignment operatiosn are first set to the corresponding \ncanvas\n property, which in turn is assigned the value of \nwindow.innerWidth\n or \nwindow.innerHeight\n which is a Javascript engine model property that returns the full width and height of our browser screen in pixels, respectively. (NOTE: although the values of \nwindow.innerWidth\n and \nwindow.innerHeight\n are representative of pixels, their actual values are just numbers, i.e, \n600\n or \n920.60\n).\n\n\nStep 3\n\n\nNow it is time to add some event listeners! What are those? Well, the browser is waiting for you to interact with the computer (like its listening for something), and then when you do something, like press a key or move your mouse, it triggers what is called an \nevent\n which allows us as programmers to use that event data. We can add different kinds of \nlisteners\n to our HTML elements that perform different functions when different events are \"fired\" (which just means they happend, like a click).\n\n\nIn our \nmain.js\n file lets add some event listeners: \n\n\ncanvas.addEventListener(\"mousedown\", mouseDownEvent);\ncanvas.addEventListener(\"mousemove\", mouseMoveEvent);\ncanvas.addEventListener(\"mouseup\", mouseUpEvent);\n\n\n\nEach of these functions is adding a different type of listener to the \ncanvas\n. Each function takes in two parameters (those are the things within the parentheses separated by commas). The first parameter is in quotes, because it is a string value, and tells the function what type of listener to add to our \ncanvas\n object. The second parameter is a function that we want to be called (or executed) whenever that event fires. We will create these functions next.\n\n\nRight now our \nindex.html\n file should look the same as in \n Step 1\n, and our \nmain.js\n should look as follows:\n\n\nvar canvas = document.getElementById(\"paper\"),\nctx = canvas.getContext(\"2d\"),\nwidth = canvas.width = window.innerWidth,\nheight = canvas.height = window.innerHeight;\n\ncanvas.addEventListener(\"mousedown\", mouseDownEvent);\ncanvas.addEventListener(\"mousemove\", mouseMoveEvent);\ncanvas.addEventListener(\"mouseup\", mouseUpEvent);\n\n\n\nStep 4\n\n\nNow let's create those functions, known as \nEvent Handlers\n. \n\n\nAdd the following to your \nmain.js\n file:\n\n\nfunction mouseDownEvent(event) {\n    drawAt(event.clientX, event.clientY);\n    drawing = true;\n}\n\nfunction mouseMoveEvent(event) {\n    if(drawing) {\n        drawAt(event.clientX, event.clientY);\n    }\n}\n\nfunction mouseUpEvent() {\n    drawing = false;\n}\n\n\n\nThe first function, \nmouseDownEvent(event)\n is taking in the \nevent\n object as a parameter, and using its \nclientX\n and \nclientY\n properties in the \ndrawAt\n function, which we will create in a moment. It also sets the variable \ndrawing\n to true, something else that will be added in a moment.\n\n\nThe second function, \nmouseMoveEvent(event)\n is again taking in the \nevent\n parameter that is passed in by the event listener to check if we are drawing (a.k.a. if the mouse is being pressed), and if so then use the \ndrawAt\n function to draw at the \nclientX\n and \nclientY\n location.\n\n\nThe third function, \nmouseUpEvent()\n is going to simply set \ndrawing\n to false, so that way we aren't adding anything onto our \ncanvas\n when the mouse isn't being pressed.\n\n\nStep 5\n\n\nCreate the \ndrawAt\n function and a few other variables.\n\n\nIn our \nmain.js\n file lets add the \ndrawing\n variable.\n\n\nAt the top of our file, below our variables initializations, create a new variable:\n\n\nvar drawing = false;\n\n\n\nThis is going to help us check if we have the mouse pressed or not, and thus whether we should be drawing.\n\n\nAdd these other variables too:\n\n\nvar color = \"black\";\nvar size = 10;\nvar type = \"square\";\n\n\n\nNow we are going to make use of these new variables in our \ndrawAt\n function.\n\n\nLet's create that now, adding it below those variables we just made:\n\n\nfunction drawAt(x, y) {\n    ctx.fillStyle = color;\n    if(type.toLowerCase().trim() == \"square\") {\n        var kx = x - size / 2,\n            ky = y - size / 2;\n        ctx.fillRect(kx, ky, size, size);\n    } else if(type.toLowerCase().trim() == \"circle\") {\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\n\n\nWow! Okay thats a hefty function, so let's dissect it a bit. \n\n\nAfter declaring the function (saying function and then the function name, \ndrawAt\n) with our \nx\n and \ny\n parameters, the first thing to notice is we assign \nctx.fillStyle\n to our \ncolor\n variable. This assures that whenever we draw it will always be in whatever value is stored in the \ncolor\n variable. \n\n\nThe next thing is component is an if, else if block that checks if our \ntype\n is a square or a circle. It converts our \ntype\n function to \ntoLowerCase\n and then uses \ntrim\n to get rid of excess white space. This ensures that the values are not case-sensitive.\n\n\nIf we move into our \nsquare\n part of the if, else if block, we will see some code that initializes two variables: \nkx\n and \nky\n. These are simply computing the coordinates of the midpoint of the square we want to draw by subtracting half of the \nsize\n variable from each value. Then, using the \nfillRect\n function on our \nctx\n variable, we can draw a rectangle at that location at the specified (x, y, width, height). Our \nsize\n variable takes care of the \nwidth\n and \nheight\n of our square, while our newly calculated midpoint coordinates take the place of \nx\n and \ny\n.\n\n\nMoving into our \ncircle\n part of the if, else if block we will see code for creating a circle in canvas. The first step is using \nbeginPath\n then using \narc(x, y, radius, startAngle, endAngle)\n to draw a circle. Here we use the raw \nx\n and \ny\n with our \nsize\n variable as the radius, and then \n0\n as our startAngle and \nMath.PI * 2\n as the endAngle in order to get a full circle. After this, we \nfill\n it and then \nclosePath\n.\n\n\nGreat job! Our drawing app is nearly completed. Your \nmain.js\n file should look like the following: \n\n\nvar canvas = document.getElementById(\"paper\"),\nctx = canvas.getContext(\"2d\"),\nwidth = canvas.width = window.innerWidth,\nheight = canvas.height = window.innerHeight;\n\nvar drawing = false;\nvar color = \"black\";\nvar size = 10;\nvar type = \"square\";\n\nfunction drawAt(x, y) {\n    ctx.fillStyle = color;\n    if(type.toLowerCase().trim() == \"square\") {\n        var kx = x - size / 2,\n            ky = y - size / 2;\n        ctx.fillRect(kx, ky, size, size);\n    } else if(type.toLowerCase().trim() == \"circle\") {\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\ncanvas.addEventListener(\"mousedown\", mouseDownEvent);\ncanvas.addEventListener(\"mousemove\", mouseMoveEvent);\ncanvas.addEventListener(\"mouseup\", mouseUpEvent);\n\nfunction mouseDownEvent(event) {\n    drawAt(event.clientX, event.clientY);\n    drawing = true;\n}\n\nfunction mouseMoveEvent(event) {\n    if(drawing) {\n        drawAt(event.clientX, event.clientY);\n    }\n}\n\nfunction mouseUpEvent() {\n    drawing = false;\n}\n\n\n\nAt this point, you can start drawing on your browser by opening up the \nindex.html\n file in Google Chrome for example. However, there are a few more things we need to add in order to customize our drawing tool while we draw and save our drawings.\n\n\nStep 6\n\n\nNow we will add another listener, in order to receive keyboard input and change the values of our variables real-time.\n\n\nAdd the following event listener with the others you have already created in your \nmain.js\n.\n\n\ndocument.body.addEventListener(\"keydown\", keyDownEvent);\n\n\n\nNotice that we are using \ndocument.body\n and not \ncanvas\n this time.\n\n\nNow, let's create this event handler:\n\n\nfunction keyDownEvent(event) {\n    switch(event.keyCode) {\n        case 67: // c\n            color = prompt(\"What color do you want to draw with?\");\n            break;\n        case 83: // s \n            size = parseInt(prompt(\"What size do you want to draw with?\"));\n            break;\n        case 84: // t \n            type = prompt(\"What type of tip do you want to draw with? (square or circle)\");\n            break;\n    }\n}\n\n\n\nThe \nkeyDownEvent(event)\n function is going to use a \nswitch\n statement to check the value of \nevent.keyCode\n in order to see if any of the keys we care about were pressed. The \nswitch\n statement is going to go through case by case, entering the case block if the value in \nswitch(value)\n is equal to the value of the case. Once it reaches the end of the statement or a \nbreak\n it jumps out of the function. \n\n\nWe are checking if the keys \nc\n, \ns\n, and \nt\n, are pressed. When \nc\n is pressed we prompt the user for a new color. When \ns\n is pressed we prompt the user for a new size, and then use the \nparseInt\n function to retrieve an integer value from the string that is returned by \nprompt\n. Then if \nt\n is pressed we prompt the user for a new type. For all of these prompts we assign the return values to their respective variables.\nif we add in this function by our other event handlers and run the code, we should be able to change the color, size, and type of drawing tool we use by pressing the \nc\n, \ns\n, and \nt\n, keys, respectively.\n\n\nHome stretch! We have one final step to top off this lesson.\n\n\nStep 7\n\n\nNow we will be creating the functionality to save our beautiful drawings.\n\n\nIn our \nkeyDownEvent\n function, go into the \nswitch\n statement and after the last \nbreak\n add another \ncase\n like so:\n\n\ncase 32: // space bar\n    var imageData = canvas.toDataURL(),\n        name = \"Image\" + Date.now();\n    var download = document.createElement(\"a\");\n        download.setAttribute(\"href\", imageData);\n        download.setAttribute(\"download\", name);\n        download.innerHTML = name;\n\n    var br = document.createElement(\"br\");\n\n    document.body.appendChild(br);\n    document.body.appendChild(download);\n    break;\n\n\n\nThis \ncase\n will trigger when the spacebar is pressed, creating an \na\n/a\n tag with Javascript using the \ndocument.createElement(name)\n method, then setting it's \nhref\n attribute to the \nimageData\n which we retrieve with the \ncanvas.toDataURL\n function. This, in conjunction with the \ndownload\n attribute, will allow us to download the current image on our canvas. Next we set the \ninnerHTML\n so that a name displays, this name being a concatenation of \"Image\" and the current time in milliseconds using \nDate.now()\n. Next, we create a \nbr/\n element to space out our download links as they are created, then append these to our \ndocument.body\n, remembering to add the \nbreak\n at the end. \n\n\nGreat job!\n\n\nYou have succesfully created a drawing app where you can customize your brush and download your masterpieces. Be sure to share this with all of your friends!\n\n\nThe final status of \nmain.js\n is shown below:\n\n\nvar canvas = document.getElementById(\"paper\"),\nctx = canvas.getContext(\"2d\"),\nwidth = canvas.width = window.innerWidth,\nheight = canvas.height = window.innerHeight;\n\nvar drawing = false;\nvar color = \"black\";\nvar size = 10;\nvar type = \"square\";\n\nfunction drawAt(x, y) {\n    ctx.fillStyle = color;\n    if(type.toLowerCase().trim() == \"square\") {\n        var kx = x - size / 2,\n            ky = y - size / 2;\n        ctx.fillRect(kx, ky, size, size);\n    } else if(type.toLowerCase().trim() == \"circle\") {\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\ncanvas.addEventListener(\"mousedown\", mouseDownEvent);\ncanvas.addEventListener(\"mousemove\", mouseMoveEvent);\ncanvas.addEventListener(\"mouseup\", mouseUpEvent);\ndocument.body.addEventListener(\"keydown\", keyDownEvent);\n\nfunction mouseDownEvent(event) {\n    drawAt(event.clientX, event.clientY);\n    drawing = true;\n}\n\nfunction mouseMoveEvent(event) {\n    if(drawing) {\n        drawAt(event.clientX, event.clientY);\n    }\n}\n\nfunction mouseUpEvent() {\n    drawing = false;\n}\n\nfunction keyDownEvent(event) {\n    switch(event.keyCode) {\n        case 67: // c\n            color = prompt(\"What color do you want to draw with?\");\n            break;\n        case 83: // s \n            size = parseInt(prompt(\"What size do you want to draw with?\"));\n            break;\n        case 84: // t \n            type = prompt(\"What type of tip do you want to draw with? (square or circle)\");\n            break;\n        case 32: // space bar\n            var imageData = canvas.toDataURL(),\n            name = \"Image\" + Date.now();\n            var download = document.createElement(\"a\");\n                download.setAttribute(\"href\", imageData);\n                download.setAttribute(\"download\", name);\n                download.innerHTML = name;\n\n            var br = document.createElement(\"br\");\n\n            document.body.appendChild(br);\n            document.body.appendChild(download);\n            break;\n    }\n}", 
            "title": "Drawing App Project"
        }, 
        {
            "location": "/HTML5DrawingApp/#drawing-app-with-html5-canvas-and-javascript", 
            "text": "Prerequisites: a brain and some basic knowledge of HTML and Javascript.  End Product : a semi-functional, semi-user-friendly, super-cool web app that allows you to draw with your mouse and change the color/size/type of drawing tool.", 
            "title": "Drawing App with HTML5 Canvas and Javascript"
        }, 
        {
            "location": "/HTML5DrawingApp/#project-setup", 
            "text": "You will need a text editor (I recommend  Atom.io  or  Textwrangler ), but even Notepad will do. Setup a folder that will contain all of the files for this project, and name it something like  JavascriptDrawingApp  (or don't, name it dankmemes if you want). And thats it! Open up your text editor and if you are using a more advanced text editor you can open up the path for your project foldner and advance to the next step (don't worry if you can't, you will probably just need to leave the folder open in your system's file tree, i.e. Finder for Mac, so you can quickly access files inside of it.)  If you're on the web, you can use  Codepen Projects", 
            "title": "Project Setup"
        }, 
        {
            "location": "/HTML5DrawingApp/#step-1", 
            "text": "Create your  index.html  file and add the following:   !DOCTYPE html   html \n     head \n         title  My cool drawing app  /title \n         style \n            html, body {\n                margin: 0px;\n                padding: 0px;\n                overflow-x: hidden;\n            }\n         /style \n     /head \n     body \n         canvas id=\"paper\" /canvas \n         script src=\"main.js\" /script \n     /body  /html   This is just setting up a basic HTML file that has the small amount of CSS we need in a  style  tag. All the CSS is doing is making sure that our canvas will be able to take up the entire browser screen by eliminating any extra space. Then in our  body  we have our  canvas id=\"paper\" /canvas  that we will use in our Javascript to draw to, and then our  script  tag requesting the Javascript resource,  main.js  that we will create next.", 
            "title": "Step 1"
        }, 
        {
            "location": "/HTML5DrawingApp/#step-2", 
            "text": "In the same folder as your  index.html  file, create a  main.js  file and enter the following:  var canvas = document.getElementById(\"paper\"),\n    ctx = canvas.getContext(\"2d\"),\n    width = canvas.width = window.innerWidth,\n    height = canvas.height = window.innerHeight;  This Javascript code is initializing a couple of variables, the first being  canvas , which is initialized to a DOM (Document Object Model) function  document.getElementById(id)  that returns the HTML element with the corresponding id in our index.html file (in this case, our  canvas id=\"paper\" /canvas  element. After this assignment we move onto our context variable,  ctx , which calls the function  getContext(\"2d\")  on our recently created  canvas  variable in order to return an object that we can use to draw onto our  canvas  with. Finally, the variables  width  and  height  are initiated and in a chain of assignment operatiosn are first set to the corresponding  canvas  property, which in turn is assigned the value of  window.innerWidth  or  window.innerHeight  which is a Javascript engine model property that returns the full width and height of our browser screen in pixels, respectively. (NOTE: although the values of  window.innerWidth  and  window.innerHeight  are representative of pixels, their actual values are just numbers, i.e,  600  or  920.60 ).", 
            "title": "Step 2"
        }, 
        {
            "location": "/HTML5DrawingApp/#step-3", 
            "text": "Now it is time to add some event listeners! What are those? Well, the browser is waiting for you to interact with the computer (like its listening for something), and then when you do something, like press a key or move your mouse, it triggers what is called an  event  which allows us as programmers to use that event data. We can add different kinds of  listeners  to our HTML elements that perform different functions when different events are \"fired\" (which just means they happend, like a click).  In our  main.js  file lets add some event listeners:   canvas.addEventListener(\"mousedown\", mouseDownEvent);\ncanvas.addEventListener(\"mousemove\", mouseMoveEvent);\ncanvas.addEventListener(\"mouseup\", mouseUpEvent);  Each of these functions is adding a different type of listener to the  canvas . Each function takes in two parameters (those are the things within the parentheses separated by commas). The first parameter is in quotes, because it is a string value, and tells the function what type of listener to add to our  canvas  object. The second parameter is a function that we want to be called (or executed) whenever that event fires. We will create these functions next.  Right now our  index.html  file should look the same as in   Step 1 , and our  main.js  should look as follows:  var canvas = document.getElementById(\"paper\"),\nctx = canvas.getContext(\"2d\"),\nwidth = canvas.width = window.innerWidth,\nheight = canvas.height = window.innerHeight;\n\ncanvas.addEventListener(\"mousedown\", mouseDownEvent);\ncanvas.addEventListener(\"mousemove\", mouseMoveEvent);\ncanvas.addEventListener(\"mouseup\", mouseUpEvent);", 
            "title": "Step 3"
        }, 
        {
            "location": "/HTML5DrawingApp/#step-4", 
            "text": "Now let's create those functions, known as  Event Handlers .   Add the following to your  main.js  file:  function mouseDownEvent(event) {\n    drawAt(event.clientX, event.clientY);\n    drawing = true;\n}\n\nfunction mouseMoveEvent(event) {\n    if(drawing) {\n        drawAt(event.clientX, event.clientY);\n    }\n}\n\nfunction mouseUpEvent() {\n    drawing = false;\n}  The first function,  mouseDownEvent(event)  is taking in the  event  object as a parameter, and using its  clientX  and  clientY  properties in the  drawAt  function, which we will create in a moment. It also sets the variable  drawing  to true, something else that will be added in a moment.  The second function,  mouseMoveEvent(event)  is again taking in the  event  parameter that is passed in by the event listener to check if we are drawing (a.k.a. if the mouse is being pressed), and if so then use the  drawAt  function to draw at the  clientX  and  clientY  location.  The third function,  mouseUpEvent()  is going to simply set  drawing  to false, so that way we aren't adding anything onto our  canvas  when the mouse isn't being pressed.", 
            "title": "Step 4"
        }, 
        {
            "location": "/HTML5DrawingApp/#step-5", 
            "text": "Create the  drawAt  function and a few other variables.  In our  main.js  file lets add the  drawing  variable.  At the top of our file, below our variables initializations, create a new variable:  var drawing = false;  This is going to help us check if we have the mouse pressed or not, and thus whether we should be drawing.  Add these other variables too:  var color = \"black\";\nvar size = 10;\nvar type = \"square\";  Now we are going to make use of these new variables in our  drawAt  function.  Let's create that now, adding it below those variables we just made:  function drawAt(x, y) {\n    ctx.fillStyle = color;\n    if(type.toLowerCase().trim() == \"square\") {\n        var kx = x - size / 2,\n            ky = y - size / 2;\n        ctx.fillRect(kx, ky, size, size);\n    } else if(type.toLowerCase().trim() == \"circle\") {\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n    }\n}  Wow! Okay thats a hefty function, so let's dissect it a bit.   After declaring the function (saying function and then the function name,  drawAt ) with our  x  and  y  parameters, the first thing to notice is we assign  ctx.fillStyle  to our  color  variable. This assures that whenever we draw it will always be in whatever value is stored in the  color  variable.   The next thing is component is an if, else if block that checks if our  type  is a square or a circle. It converts our  type  function to  toLowerCase  and then uses  trim  to get rid of excess white space. This ensures that the values are not case-sensitive.  If we move into our  square  part of the if, else if block, we will see some code that initializes two variables:  kx  and  ky . These are simply computing the coordinates of the midpoint of the square we want to draw by subtracting half of the  size  variable from each value. Then, using the  fillRect  function on our  ctx  variable, we can draw a rectangle at that location at the specified (x, y, width, height). Our  size  variable takes care of the  width  and  height  of our square, while our newly calculated midpoint coordinates take the place of  x  and  y .  Moving into our  circle  part of the if, else if block we will see code for creating a circle in canvas. The first step is using  beginPath  then using  arc(x, y, radius, startAngle, endAngle)  to draw a circle. Here we use the raw  x  and  y  with our  size  variable as the radius, and then  0  as our startAngle and  Math.PI * 2  as the endAngle in order to get a full circle. After this, we  fill  it and then  closePath .  Great job! Our drawing app is nearly completed. Your  main.js  file should look like the following:   var canvas = document.getElementById(\"paper\"),\nctx = canvas.getContext(\"2d\"),\nwidth = canvas.width = window.innerWidth,\nheight = canvas.height = window.innerHeight;\n\nvar drawing = false;\nvar color = \"black\";\nvar size = 10;\nvar type = \"square\";\n\nfunction drawAt(x, y) {\n    ctx.fillStyle = color;\n    if(type.toLowerCase().trim() == \"square\") {\n        var kx = x - size / 2,\n            ky = y - size / 2;\n        ctx.fillRect(kx, ky, size, size);\n    } else if(type.toLowerCase().trim() == \"circle\") {\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\ncanvas.addEventListener(\"mousedown\", mouseDownEvent);\ncanvas.addEventListener(\"mousemove\", mouseMoveEvent);\ncanvas.addEventListener(\"mouseup\", mouseUpEvent);\n\nfunction mouseDownEvent(event) {\n    drawAt(event.clientX, event.clientY);\n    drawing = true;\n}\n\nfunction mouseMoveEvent(event) {\n    if(drawing) {\n        drawAt(event.clientX, event.clientY);\n    }\n}\n\nfunction mouseUpEvent() {\n    drawing = false;\n}  At this point, you can start drawing on your browser by opening up the  index.html  file in Google Chrome for example. However, there are a few more things we need to add in order to customize our drawing tool while we draw and save our drawings.", 
            "title": "Step 5"
        }, 
        {
            "location": "/HTML5DrawingApp/#step-6", 
            "text": "Now we will add another listener, in order to receive keyboard input and change the values of our variables real-time.  Add the following event listener with the others you have already created in your  main.js .  document.body.addEventListener(\"keydown\", keyDownEvent);  Notice that we are using  document.body  and not  canvas  this time.  Now, let's create this event handler:  function keyDownEvent(event) {\n    switch(event.keyCode) {\n        case 67: // c\n            color = prompt(\"What color do you want to draw with?\");\n            break;\n        case 83: // s \n            size = parseInt(prompt(\"What size do you want to draw with?\"));\n            break;\n        case 84: // t \n            type = prompt(\"What type of tip do you want to draw with? (square or circle)\");\n            break;\n    }\n}  The  keyDownEvent(event)  function is going to use a  switch  statement to check the value of  event.keyCode  in order to see if any of the keys we care about were pressed. The  switch  statement is going to go through case by case, entering the case block if the value in  switch(value)  is equal to the value of the case. Once it reaches the end of the statement or a  break  it jumps out of the function.   We are checking if the keys  c ,  s , and  t , are pressed. When  c  is pressed we prompt the user for a new color. When  s  is pressed we prompt the user for a new size, and then use the  parseInt  function to retrieve an integer value from the string that is returned by  prompt . Then if  t  is pressed we prompt the user for a new type. For all of these prompts we assign the return values to their respective variables.\nif we add in this function by our other event handlers and run the code, we should be able to change the color, size, and type of drawing tool we use by pressing the  c ,  s , and  t , keys, respectively.  Home stretch! We have one final step to top off this lesson.", 
            "title": "Step 6"
        }, 
        {
            "location": "/HTML5DrawingApp/#step-7", 
            "text": "Now we will be creating the functionality to save our beautiful drawings.  In our  keyDownEvent  function, go into the  switch  statement and after the last  break  add another  case  like so:  case 32: // space bar\n    var imageData = canvas.toDataURL(),\n        name = \"Image\" + Date.now();\n    var download = document.createElement(\"a\");\n        download.setAttribute(\"href\", imageData);\n        download.setAttribute(\"download\", name);\n        download.innerHTML = name;\n\n    var br = document.createElement(\"br\");\n\n    document.body.appendChild(br);\n    document.body.appendChild(download);\n    break;  This  case  will trigger when the spacebar is pressed, creating an  a /a  tag with Javascript using the  document.createElement(name)  method, then setting it's  href  attribute to the  imageData  which we retrieve with the  canvas.toDataURL  function. This, in conjunction with the  download  attribute, will allow us to download the current image on our canvas. Next we set the  innerHTML  so that a name displays, this name being a concatenation of \"Image\" and the current time in milliseconds using  Date.now() . Next, we create a  br/  element to space out our download links as they are created, then append these to our  document.body , remembering to add the  break  at the end.   Great job!  You have succesfully created a drawing app where you can customize your brush and download your masterpieces. Be sure to share this with all of your friends!  The final status of  main.js  is shown below:  var canvas = document.getElementById(\"paper\"),\nctx = canvas.getContext(\"2d\"),\nwidth = canvas.width = window.innerWidth,\nheight = canvas.height = window.innerHeight;\n\nvar drawing = false;\nvar color = \"black\";\nvar size = 10;\nvar type = \"square\";\n\nfunction drawAt(x, y) {\n    ctx.fillStyle = color;\n    if(type.toLowerCase().trim() == \"square\") {\n        var kx = x - size / 2,\n            ky = y - size / 2;\n        ctx.fillRect(kx, ky, size, size);\n    } else if(type.toLowerCase().trim() == \"circle\") {\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n    }\n}\n\ncanvas.addEventListener(\"mousedown\", mouseDownEvent);\ncanvas.addEventListener(\"mousemove\", mouseMoveEvent);\ncanvas.addEventListener(\"mouseup\", mouseUpEvent);\ndocument.body.addEventListener(\"keydown\", keyDownEvent);\n\nfunction mouseDownEvent(event) {\n    drawAt(event.clientX, event.clientY);\n    drawing = true;\n}\n\nfunction mouseMoveEvent(event) {\n    if(drawing) {\n        drawAt(event.clientX, event.clientY);\n    }\n}\n\nfunction mouseUpEvent() {\n    drawing = false;\n}\n\nfunction keyDownEvent(event) {\n    switch(event.keyCode) {\n        case 67: // c\n            color = prompt(\"What color do you want to draw with?\");\n            break;\n        case 83: // s \n            size = parseInt(prompt(\"What size do you want to draw with?\"));\n            break;\n        case 84: // t \n            type = prompt(\"What type of tip do you want to draw with? (square or circle)\");\n            break;\n        case 32: // space bar\n            var imageData = canvas.toDataURL(),\n            name = \"Image\" + Date.now();\n            var download = document.createElement(\"a\");\n                download.setAttribute(\"href\", imageData);\n                download.setAttribute(\"download\", name);\n                download.innerHTML = name;\n\n            var br = document.createElement(\"br\");\n\n            document.body.appendChild(br);\n            document.body.appendChild(download);\n            break;\n    }\n}", 
            "title": "Step 7"
        }
    ]
}